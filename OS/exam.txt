Les mesures relevées sur un système donné ont montré que la durée moyenne d’exécution d’un processus était de T avant que ne se produise un blocage sur les E/S. Un changement de processus a besoin d'un délai S que l'on peut considérer comme une perte de temps. Pour un algorithme d'ordonnancement de type tourniquet avec un quantum Q, donnez une formule pour exprimer l'efficacité de l'UC pour chacun des cas suivants :
a. Q= 8
b. Q>T
c. S < Q < T
d. Q=S
e. Q proche de 0
	Efficacité = Temps utile / temps total
	Le temps utile est le temps requis pour executer le processus
	Le temps total est le temps utile + les changements de contexte
	Donc pour Q > T le processus s'exécute le temps du quantum, il n'y a qu'un changement de contexte
	a. b. E = T / (T + S)
	Si le quantum est plus court que le temps utile il y aura plusieurs changements de contexte
	c. E = T / T + T % Q * S -> T / T + T / Q * S -> T / T + ST / Q
	Si S = Q
	d. T / T + ST / Q -> T / T + QT / Q -> T / T + T -> T / 2T -> 1 / 2 -> 50%
	e. Q tend vers 0, l'éfficacité tend vers 0


Cinq jobs sont en attente d'exécution. Leurs délais d'exécution sont respectivement de 9, 6, 3, 5 et X minutes. Dans quel ordre faut-il les exécuter pour réduire le temps de réponse moyen ? Votre réponse dépendra de X.
	A priorité comparable, il faut les classer du plus rapide au plus long. Il faut donc placer X entre deux jobs, celui qui est immédiatement plus rapide et celui qui est immédiatement plus long.


Un système de va-et-vient élimine la fragmentation externe grâce au compactage. Supposons une distribution aléatoire de nombreux vides et de nombreuses zones de données et un temps de lecture ou d'écriture de 10 ns pour un mot mémoire de 32 bits. Combien de temps processeur sera nécessaire pour compacter 128 Mo ? Pour simplifier, nous supposons que le mot d'adresse 0 fait partie d'une zone vide et que le mot le plus haut dans la mémoire contient une donnée valide.
	32 bits font 4 octets, 10 ns de lecture et d'écriture pour un mot mémoire: 5 ns pour un octet
	128 Mo = 134217728o multiplié par 0.000000005 secondes fait donc 0,671 secondes


Dans ce problème, vous devez comparer l'espace de stockage nécessaire pour mémoriser la mémoire libre, d'une part avec une table de bits, d'autre part avec une liste chaînée. La mémoire de 128 Mo est allouée par unités de n octets. Pour la liste chaînée, nous supposons que la mémoire est constituée de segments de 64 Ko en alternance avec des zones vides de taille identique. Nous admettons également que chaque nœud de cette liste nécessite une adresse mémoire de 32 bits, une longueur de 16 bits et un champ de 16 bits pour le prochain nœud. Quelle est la taille de stockage nécessaire pour chaque méthode ? Laquelle est la meilleure ?
	Table de bits: un bit représente un octet -> 128 Mo équivaut à 2^27 octets on a donc besoin de 2^27 bits pour les stocker. 2^27 bits vaut 2^24 octets soit 16 Mo
	Liste chaînée: 128Mo -> 131072 Ko. 131072 / 64 -> 2048 segments. Ces segments font au total 2048 x 64 bits (32 bits + 16 bits + 16 bits = 8 octets) soit 16 Ko
	La liste chaînée est préférable. Si les unités de n octets sont importantes, il vaut mieux une table de bits.


La quantité d'espace disque qui doit être disponible pour stocker des pages est liée au nombre maximum de processus, N, au nombre d'octets de l'espace d'adressage virtuel, V, et au nombre d'octets de la RAM, R. Imaginez le cas le plus défavorable pour l'espace disque requis et donnez-en une expression. Cette valeur est-elle réaliste ?
	Espace d'adressage virtuel total -> nv. On dispose de la RAM, donc la mémoire nécéssaire est ce que la RAM ne permet pas de fournir soit -> nv - r.
	Il est peu probable que tant de processus soient actifs au même moment et qu'il nécéssitent tous en même temps de la quantité maximale de mémoire.


Un ordinateur ayant des adresses 32 bits utilise une table des pages à deux niveaux. Les adresses virtuelles ont trois parties : un champ de 9 bits qui représente le premier niveau, un champ de 11 bits qui représente le second niveau, et un déplacement. De quelle taille sont les pages ? Combien en existe-t-il dans l'espace d'adressage ? 
	Une page est définie sur 20 bits (9 + 11) il reste donc 12 bits pour le décalage. Dans l'intervalle d'un décalage on a donc une place de 12 bits pour définir une page, un octet par bit soit 2^12 -> 4096 o -> 4 Ko
	20 bits par page virtuelle donne 2^20 pages, une page par octet


Combien de temps faudra-t-il pour charger un programme de 64 Ko depuis un disque dont le temps moyen de recherche est de 10 ms et le temps de rotation de 10 ms, et dont les pistes font 32 Ko :
a. Pour des pages de 2 Ko ?
b. Pour des pages de 4 Ko ?

On considère que les pages sont aléatoirement réparties sur le disque et que la probabilité que deux pages soient sur le même cylindre est négligeable.
	Temps de rotation + recherche dans les deux cas = 10ms + 10ms
	a) Temps de transfert pour une page de 2Ko -> 10 / 32 * 2 -> 1.25ms. 21.25ms par page, il faut donc 32 pages soit 680ms
	b) Temps de transfert pour une page de 4Ko -> 10 / 32 * 4 -> 2.5ms. 22.5ms par page, il faut donc 16 pages soit 360ms


Nous avons constaté que le nombre d'instructions exécutées entre des défauts de pages est directement proportionnel au nombre de cases mémoire allouées au programme. Si la mémoire disponible est doublée, l'intervalle moyen entre des défauts de pages successifs est aussi doublé. Supposons qu'une instruction normale prenne 1 μs, mais que si un défaut de page se produit, elle prenne 2 001 μs. Si un programme prend 60 s pour s'exécuter en produisant 15 000 défauts de pages, quelle serait sa durée d'exécution s'il y avait deux fois plus de mémoire disponible ?
	Intervalle moyen entre deux défauts de page: 60s / 15000 = 250 μs
	Le temps d'execution d'une instruction est plus long que l'intervalle entre deux défauts de pages.A chaque défaut de page il y a donc une seule instruction de 2001 μs d'éxécutée.
	Temps d'éxécution lié aux instructions pendant les défauts de page: 15000 * 2001 -> 30015000 μs
	Temps d'éxécution lié aux instructions normales: 60000000 - 30015000 = 29985000 μs donc 29985000 instructions.
	29985000 instructions normales + 15000 instructions pendant les défauts de pages = 30000000

	Si on double la mémoire on aura donc deux fois moins de défauts de pages avec des intervalles deux fois plus longs: 500 μs.
	Le temps d'execution d'une instruction est toujours plus long que l'intervalle entre deux défauts de page.
	Temps d'éxécution lié aux instructions pendant les défauts de page: 7500 * 2001 -> 15007500 μs
	Nombres d'instructions restantes: 30000000 - 7500 = 29992500 instructions donc 29992500 μs 
	Donc le temps total d'éxécution avec deux fois plus de mémoire sera de 15007500 μs + 29992500 μs = 45 secondes
